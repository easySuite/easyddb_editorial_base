<?php

/**
 * @file
 * Editorial dashboard module.
 *
 * Provides integration with editorial base system.
 */

/**
 * Implements hook_menu().
 */
function easyddb_editorial_base_menu() {
  $menu = array();

  $menu['admin/config/edbase'] = array(
    'title' => 'Editorial Base',
    'description' => 'Editorial Base settings',
    'access arguments' => array('administer editorial base'),
    'page callback' => 'easyddb_editorial_base_admin_menu_block_page',
    'page arguments' => array(),
    'file' => 'easyddb_editorial_base.admin.inc',
  );

  $menu['admin/config/edbase/content'] = array(
    'title' => 'Content types',
    'description' => 'Node bundles that are a part of editorial base system',
    'access arguments' => array('administer editorial base'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('easyddb_editorial_base_admin_content_types'),
    'file' => 'easyddb_editorial_base.admin.inc',
  );

  return $menu;
}

/**
 * Implements hook_theme().
 */
function easyddb_editorial_base_theme($existing, $type, $theme, $path) {
  return array(
    'editorial_base_term_widget' => array(
      'variables' => array(
        'description' => NULL,
        'image' => NULL,
      ),
      'template' => 'editorial-base-term-widget',
      'path' => $path . '/templates',
    ),
  );
}

/**
 * Implements hook_ctools_plugin_directory().
 */
function easyddb_editorial_base_ctools_plugin_directory($owner, $plugin_type) {
  if ($owner == 'ctools' && $plugin_type == 'content_types') {
    return 'plugins/content_types';
  }
}

/**
 * Callback function to render plugin content.
 *
 * @throws \Exception
 */
function easyddb_editorial_base_section_list_content_type_render($subtype, $conf, $panel_args, $context) {
  $block = new stdClass();
  $block->content = '';

  if (!empty($panel_args)) {
    $term = entity_metadata_wrapper('taxonomy_term', reset($panel_args));
    if (!$term) {
      return $block;
    }

    $img_content = $term->field_eb_section_content_image->value();
    $image = ($img_content)
      ? image_style_url('editorial_base_content_image', $img_content['uri'])
      : NULL;

    $block->content = theme('editorial_base_term_widget', [
      'description' => $term->field_eb_section_summary_text->value(),
      'image' => $image,
    ]);
  }

  return $block;
}

/**
 * Implements hook_menu_alter().
 */
function easyddb_editorial_base_menu_alter(&$items) {
  $items['admin/structure/taxonomy/%taxonomy_vocabulary_machine_name/add']['access callback'] = 'easyddb_editorial_base_section_add_access';
  $items['admin/structure/taxonomy/%taxonomy_vocabulary_machine_name/add']['access arguments'] = array(3);
}

/**
 * Custom access callback for overriding taxonomy access rules.
 *
 * @param object $voc
 *   Loaded vocabulary.
 *
 * @return bool
 *   Access value.
 *
 * @see easyddb_editorial_base_menu_alter()
 */
function easyddb_editorial_base_section_add_access($voc) {
  global $user;

  if ($voc->machine_name == 'editorial_base') {
    $access = user_access('edit terms in 8', $user);
  }
  else {
    $access = user_access('administer taxonomy', $user);
  }

  return $access;
}

/**
 * Implements hook_permission().
 */
function easyddb_editorial_base_permission() {
  $perm = array();

  $perm['administer editorial base'] = array(
    'title' => 'Administer editorial base',
    'description' => 'Change various editorial base settings',
  );

  $perm['view editorialbase panels terms'] = array(
    'title' => 'View Panel for terms',
  );

  $perm['use editorialbase panels terms'] = array(
    'title' => 'Use the Panels In-Place Editor for terms',
  );

  return $perm;
}

/**
 * Implements hook_secure_permissions().
 */
function easyddb_editorial_base_secure_permissions($role) {
  $permissions = array(
    'anonymous user' => array(
      'view editorialbase panels terms',
    ),
    'authenticated user' => array(
      'view editorialbase panels terms',
    ),
    'administrators' => array(
      'change layouts in place editing',
      'edit terms in 8',
      'delete terms in 8',
      'use ipe with page manager',
      'use panels in place editing',
      'view editorialbase panels terms',
    ),
    'editor' => array(
      'view editorialbase panels terms',
      'use editorialbase panels terms',
      'edit terms in 8',
      'delete terms in 8',
      'use ipe with page manager',
      'use panels in place editing',
    ),
    'guest blogger' => array(
      'view editorialbase panels terms',
    ),
    'local administrator' => array(
      'create editorial_base content',
      'edit any editorial_base content',
      'edit own editorial_base content',
      'delete any editorial_base content',
      'delete own editorial_base content',
      'administer editorial base',
      'view editorialbase panels terms',
      'use ipe with page manager',
      'use editorialbase panels terms',
      'use panels in place editing',
      'edit terms in 8',
      'delete terms in 8',
    ),
    'local editor' => array(
      'view editorialbase panels terms',
      'use editorialbase panels terms',
      'edit terms in 8',
      'delete terms in 8',
      'use ipe with page manager',
      'use panels in place editing',
    ),
    'provider' => array(
      'view editorialbase panels terms',
    ),
    'staff' => array(
      'view editorialbase panels terms',
    ),
  );
  if (isset($permissions[$role])) {
    return $permissions[$role];
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Alter taxonomy term (section) form.
 */
function easyddb_editorial_base_form_taxonomy_form_term_alter(&$form, &$form_state) {
  if (!isset($form['#bundle']) || $form['#bundle'] != 'editorial_base') {
    return;
  }

  $form['section_tabs'] = array(
    '#type' => 'vertical_tabs',
  );

  $tabs = module_invoke_all('section_tabs');

  if (is_array($tabs)) {
    $form += $tabs;
  }

  $form['relations']['#group'] = 'section_tabs';
}

/**
 * Implements hook_preprocess().
 */
function easyddb_editorial_base_preprocess(&$variables, $hook) {
  // Process nodes with sections.
  if ($hook == 'node') {
    if (!empty($variables['field_editorial_base'])) {
      $tid = $variables['field_editorial_base'][LANGUAGE_NONE][0]['tid'];
      $nid = $variables['nid'];
      $variables['classes_array'][] = 'section-' . $tid . '-' . $nid;
    }
  }

  // Process ding_event_calendar events list.
  if ($hook == 'ding_events_list') {
    $items = $variables['items'];

    $event_list_items = [];
    foreach ($items as $item) {
      if (!empty($item->field_editorial_base)) {
        $tid = $item->field_editorial_base['und'][0]['tid'];
        $nid = $item->nid;
        $event_list_items[] = 'section-' . $tid . '-' . $nid;
      }
    }

    drupal_add_js(['easyddb_editorial_base' => ['eb_event_list_items' => $event_list_items]], 'setting');
    drupal_add_js(drupal_get_path('module', 'easyddb_editorial_base') . '/js/easyddb_editorial_base.js', 'file');
  }

  // Process ding_nodelist widgets.
  if (strpos($hook, 'ding_nodelist_widget') !== FALSE) {
    $nodelist_items = [];
    $items = $variables['items'];
    $classes = explode(' ', $variables['conf']['classes']);
    $widget_unique = $classes[3];

    foreach ($items as $item) {
      if (!empty($item->field_editorial_base)) {
        $tid = $item->field_editorial_base['und'][0]['tid'];
        $nid = $item->nid;
        // Set concatenation of hook name and nodelist_id in order as a key for
        // correct pane processing.
        $nodelist_items[$hook . ':' . $widget_unique][] = 'section-' . $tid . '-' . $nid;
      }
      else {
        // Pass "empty" value in order to keep order.
        $nodelist_items[$hook . ':' . $widget_unique][] = 'empty';
      }
    }

    drupal_add_js(['easyddb_editorial_base' => ['nodelist_items' => $nodelist_items]], 'setting');
    drupal_add_js(drupal_get_path('module', 'easyddb_editorial_base') . '/js/easyddb_editorial_base.js', 'file');
  }
}
